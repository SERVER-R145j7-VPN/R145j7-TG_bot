"""
üß© Database Manager
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ select / insert / update / delete.
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ database.log.
"""

import time
from mysql.connector import pooling, Error
from contextlib import contextmanager
from config import DB_CONFIG
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ ===
_POOL = None
_LAST_USED = 0
_POOL_TIMEOUT = DB_CONFIG.get("pool_timeout", 120)
logger = logging.getLogger("database")


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ===
def init_pool(force=False):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    - –ï—Å–ª–∏ force=True ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø—É–ª –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å.
    - –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ª–æ–≥–∏—Ä—É–µ—Ç –∏ –Ω–µ —Ä–æ–Ω—è–µ—Ç –±–æ—Ç.
    """
    global _POOL
    if _POOL is not None and not force:
        return _POOL
    try:
        _POOL = pooling.MySQLConnectionPool(
            pool_name="r145j7_pool",
            pool_size=DB_CONFIG["pool_size"],
            pool_reset_session=True,
            **{k: v for k, v in DB_CONFIG.items() if k not in ("pool_size", "pool_timeout")}
        )
        logger.info("‚úÖ MySQL connection pool initialized")
        return _POOL
    except Error as e:
        _POOL = None
        logger.error(f"‚ùå Failed to initialize MySQL pool: {e}")
        return None

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞ ===
def _get_connection():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞.
    - –ï—Å–ª–∏ –ø—É–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –º—ë—Ä—Ç–≤ ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.
    - –ï—Å–ª–∏ MySQL –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è, —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π –ø—É–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    global _LAST_USED, _POOL
    if _POOL is None:
        _POOL = init_pool()

    try:
        conn = _POOL.get_connection()
        _LAST_USED = time.time()
        return conn
    except Error as e:
        logger.warning(f"‚ö†Ô∏è Connection lost, recreating pool... ({e})")
        _POOL = init_pool(force=True)
        if _POOL:
            try:
                conn = _POOL.get_connection()
                _LAST_USED = time.time()
                return conn
            except Error as e2:
                logger.error(f"‚ùå Failed to re-establish connection: {e2}")
                return None
        return None

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –ø—É–ª–∞ ===
def _close_idle_pool():
    global _POOL, _LAST_USED
    if _POOL and (time.time() - _LAST_USED > _POOL_TIMEOUT):
        _POOL = None
        logger.info("üïì Connection pool closed due to inactivity")


# === –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—É—Ä—Å–æ—Ä–∞ ===
@contextmanager
def get_cursor():
    conn = None
    try:
        conn = _get_connection()
        cursor = conn.cursor(dictionary=True)
        yield cursor
        conn.commit()
    except Error as e:
        logger.error(f"‚ùå DB error: {e}")
        if conn:
            conn.rollback()
    finally:
        if conn:
            conn.close()
        _close_idle_pool()


# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î ===

def db_select(query, params=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SELECT –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)"""
    with get_cursor() as cur:
        cur.execute(query, params or ())
        result = cur.fetchall()
    return result


def db_insert(query, params=None):
    """INSERT-–∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–º"""
    with get_cursor() as cur:
        cur.execute(query, params or ())
        logger.info(f"üü¢ INSERT: {query} {params}")


def db_update(query, params=None):
    """UPDATE-–∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–º"""
    with get_cursor() as cur:
        cur.execute(query, params or ())
        logger.info(f"üü† UPDATE: {query} {params}")


def db_delete(query, params=None):
    """DELETE-–∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–æ–º"""
    with get_cursor() as cur:
        cur.execute(query, params or ())
        logger.info(f"üî¥ DELETE: {query} {params}")