"""
‚Ä¢ –õ–æ–≥–≥–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  - –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —Ä–æ—Ç–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ 7 –¥–Ω–µ–π.

‚Ä¢ –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥–∞
  - –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞, base_url, —Ç–æ–∫–µ–Ω, –ø–æ—Ä–æ–≥–∏ CPU/RAM, –ø–æ—Ä–æ–≥–∏ –ø–æ –¥–∏—Å–∫—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.

‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ –ê–ü–ò
  - /cpu_ram             ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ CPU –∏ RAM, load average
  - /disk                ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞
  - /processes_systemctl ‚Üí —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  - /processes_pm2       ‚Üí —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ pm2
  - /updates             ‚Üí –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  - /backup_json         ‚Üí –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫–∞–ø–æ–≤

‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞–π–Ω–µ—Ä–æ–≤
  - –ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π psutil –∏–ª–∏ remote /processes_*).

‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ URL, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏.
"""
import psutil
import asyncio
import aiohttp
import datetime
from aiogram.client.default import DefaultBotProperties
from config import TG_ID, BOT_TOKEN, SERVERS, SITES_MONITOR, MINER_SCAN
from aiogram import Bot
import os
import re
import ssl
import logging
from logging.handlers import TimedRotatingFileHandler

# ===== –õ–æ–≥–≥–µ—Ä ===== 
def get_server_logger(server_id: str):
    os.makedirs("logs/monitoring", exist_ok=True)
    logger = logging.getLogger(f"monitoring.{server_id}")
    logger.setLevel(logging.INFO)
    logger.propagate = False

    if not logger.handlers:
        file_handler = TimedRotatingFileHandler(
            filename=f"logs/monitoring/{server_id}.log",
            when="midnight",
            interval=1,
            backupCount=7,
            encoding="utf-8"
        )
        formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)

    return logger

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã =====
LOGGERS: dict[str, logging.Logger] = {}

def init_loggers():
    # —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
    for sid in SERVERS.keys():
        LOGGERS[sid] = get_server_logger(sid)
    LOGGERS["sites"] = get_server_logger("sites")
    LOGGERS["global"] = get_server_logger("global")

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ =====
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))

# ===== –ü—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º =====
def escape_markdown(text: str) -> str:
    return re.sub(r'([_*[\]()~`>#+=|{}.!-])', r'\\\1', str(text))

# ===== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ =====
async def send_site_status(type, msg: str):
    if type == "problem":
        message = f"üåê *–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º:*\n\n{escape_markdown(msg)}"
    elif type == "request":
        message = f"üåê *–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ —Å–∞–π—Ç–æ–≤:*\n\n{escape_markdown(msg)}"
    try:
        await bot.send_message(
            chat_id=TG_ID,
            text=message,
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")

async def check_single_site(url):
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10, ssl=ssl_context) as resp:
                return resp.status == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {url}: {e}")
        return False

async def monitor_sites():
    logger = LOGGERS["sites"]

    interval = int(SITES_MONITOR.get("interval", 3600))
    interval = max(30, interval)
    urls = SITES_MONITOR.get("urls", [])
    last_status: dict[str, bool] = {}

    while True:
        for url in urls:
            is_ok = await check_single_site(url)
            if is_ok:
                logger.info(f"‚úÖ {url} ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ùå {url} ‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            prev = last_status.get(url)
            if prev is None:
                if not is_ok:
                    await send_site_status("problem", url)
            else:
                if prev and not is_ok:
                    await send_site_status("problem", url)
                elif (not prev) and is_ok:
                    try:
                        await bot.send_message(
                            chat_id=TG_ID,
                            text=f"üåê *–°–∞–π—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è:*\n\n{escape_markdown(url)}",
                            parse_mode="MarkdownV2",
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            last_status[url] = is_ok
        await asyncio.sleep(interval)

# ===== CPU/RAM =====
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CPU/RAM –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
CPU_STATE = {sid: {"status": "NORMAL", "level": 0} for sid in SERVERS}

# –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ ‚Üí –∫–ª—é—á–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
STATUS = {
    "NORMAL":  {"label": "‚úÖ *–ù–û–†–ú–ê* ‚úÖ",           "interval_key": "normal"},
    "WARNING": {"label": "‚ö†Ô∏è *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï* ‚ö†Ô∏è",  "interval_key": "warning"},
    "ALARM":   {"label": "üö® *–ü–ï–†–ï–ì–†–£–ó–ö–ê* üö®",      "interval_key": "critical"},
}

# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ CPU/RAM —Å API —Å–µ—Ä–≤–µ—Ä–∞
async def cpu_ram__fetch_data(server_id):
    logger = LOGGERS[server_id]
    srv = SERVERS[server_id]
    url = f"{srv['base_url']}/cpu_ram?token={srv['token']}"
    timeout = aiohttp.ClientTimeout(connect=10, sock_read=20)

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    logger.warning(f"[{server_id}] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
    except Exception as e:
        logger.error(f"[{server_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ CPU/RAM: {e}")

    return None


# –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ CPU_STATE
async def cpu_ram__analizer(server_id, data):
    logger = LOGGERS[server_id]
    srv = SERVERS[server_id]
    cfg = srv["cpu_ram"]
    intervals = cfg["interval"]

    st = CPU_STATE[server_id]
    status = st["status"]
    level = st["level"]

    try:
        # –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É, –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not data:
            interval = intervals[STATUS[st["status"]]["interval_key"]]
            return interval, False

        cpu = float(data["cpu"])
        ram = float(data["ram"])

        hi_cpu, lo_cpu = cfg["cpu_high"], cfg["cpu_low"]
        hi_ram, lo_ram = cfg["ram_high"], cfg["ram_low"]

        in_critical = (cpu > hi_cpu) or (ram > hi_ram)
        in_warning  = ((lo_cpu < cpu < hi_cpu) or (lo_ram < ram < hi_ram))
        in_normal   = (cpu < lo_cpu) and (ram < lo_ram)

        notify = False

        if in_critical:
            if status != "ALARM":
                level += 1
                # logger.debug(f"[{srv['name']}] critical sample #{level} (cpu={cpu:.1f} ram={ram:.1f})")
                if level >= 4:
                    st["status"] = "ALARM"
                    level = 0
                    notify = True
                else:
                    st["status"] = "WARNING"
            else:
                st["status"] = "ALARM"
                level = 0

        elif in_warning:
            st["status"] = "WARNING"
            level = 0

        elif in_normal:
            st["status"] = "NORMAL"
            if status == "ALARM":
                notify = True
            level = 0

        st["level"] = level
        interval = intervals[STATUS[st["status"]]["interval_key"]]

        # logger.info(f"[{srv['name']}] status={st['status']} level={level} cpu={cpu:.1f}% ram={ram:.1f}% -> interval={interval}s notify={notify}")
        return interval, notify
    
    except Exception as e:
        logger.error(f"[{server_id}] cpu_ram__analizer:failed -> {e}")
        interval = intervals[STATUS[st["status"]]["interval_key"]]
        return interval, False


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def cpu_ram__send_message(data_by_server):
    logger = LOGGERS["global"]
    try:
        if not data_by_server:
            logger.error("cpu_ram__send_message: empty data")
            return

        parts = []
        prepared = []

        for sid, sdata in data_by_server.items():
            srv   = SERVERS[sid]
            name  = escape_markdown(srv["name"])
            st    = CPU_STATE[sid]["status"]
            label = STATUS[st]["label"]

            cpu   = sdata["cpu"]
            ram   = sdata["ram"]
            load  = sdata.get("load") or {}

            cpu_val = escape_markdown(f"{cpu:.1f}%")
            ram_val = escape_markdown(f"{ram:.1f}%")
            l1  = escape_markdown(f"{load['1min']:.2f}")
            l5  = escape_markdown(f"{load['5min']:.2f}")
            l15 = escape_markdown(f"{load['15min']:.2f}")

            prepared.append((name, label, cpu_val, ram_val, l1, l5, l15))

        if len(prepared) == 1:
            name, label, cpu_val, ram_val, l1, l5, l15 = prepared[0]
            msg = (
                f"*{name}*\n"
                f"{label}\n\n"
                f"üñ• *CPU*: `{cpu_val} %`\n"
                f"üíª *RAM*: `{ram_val} %`\n"
                f"üìà *Load Avg*: `{l1}`, `{l5}`, `{l15}`"
            )
        else:
            for (name, label, cpu_val, ram_val, l1, l5, l15) in prepared:
                parts.append(
                    f"*{name}*\n"
                    f"{label}\n"
                    f"üñ• CPU: `{cpu_val} %` | üíª RAM: `{ram_val} %` | üìà Load: `{l1}`, `{l5}`, `{l15}`"
                )
            msg = "\n\n".join(parts)

        await bot.send_message(chat_id=TG_ID, text=msg, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"cpu_ram__send_message failed -> {e}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CPU/RAM (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
async def cpu_ram__auto_monitoring(server_id):
    logger = LOGGERS[server_id]
    while True:
        try:
            # 1. –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = await cpu_ram__fetch_data(server_id)

            # 2. –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            interval, notify = await cpu_ram__analizer(server_id, data)

            # 3. –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if notify and data:
                await cpu_ram__send_message({server_id: data})

        except Exception as e:
            logger.error(f"[{server_id}] cpu_ram__auto_monitoring failed -> {e}")
            interval = SERVERS[server_id]["cpu_ram"]["interval"][STATUS[CPU_STATE[server_id]["status"]]["interval_key"]]

        # 4. –∂–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞
        await asyncio.sleep(interval)


# –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å CPU/RAM –ø–æ –∫–Ω–æ–ø–∫–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
async def cpu_ram__manual_button(server_id):
    logger = LOGGERS["global"] if server_id == "ALL" else LOGGERS[server_id]
    try:
        # ===== –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ =====
        if server_id == "ALL":
            data_map = {}
            for sid in SERVERS.keys():
                data = await cpu_ram__fetch_data(sid)
                if data:
                    data_map[sid] = data
                else:
                    logger.warning(f"[{sid}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CPU/RAM –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            if data_map:
                await cpu_ram__send_message(data_map)
            else:
                logger.warning("‚ùå –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å CPU/RAM: –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            return

        # ===== –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä =====
        data = await cpu_ram__fetch_data(server_id)
        if data:
            await cpu_ram__send_message({server_id: data})
        else:
            logger.warning(f"[{server_id}] ‚ùå –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å CPU/RAM: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    except Exception as e:
        logger.error(f"[{server_id}] cpu_ram__manual_button failed -> {e}")

# ===== SSD =====
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DISK –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
DISK_STATE = {sid: {"alert": False} for sid in SERVERS}

# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ DISK —Å API —Å–µ—Ä–≤–µ—Ä–∞
async def disk__fetch_data(server_id):
    logger = LOGGERS[server_id]
    srv = SERVERS[server_id]
    url = f"{srv['base_url']}/disk?token={srv['token']}"
    timeout = aiohttp.ClientTimeout(connect=10, sock_read=20)

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return float(data["disk_percent"])
                else:
                    logger.warning(f"[{server_id}] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status}")
    except Exception as e:
        logger.error(f"[{server_id}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ DISK: {e}")

    return None


# –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DISK_STATE
async def disk__analyzer(server_id, data):
    logger = LOGGERS[server_id]
    try:
        if data is None:
            return False

        usage = float(data)

        threshold = SERVERS[server_id]["disk"]["threshold"]
        alert = DISK_STATE[server_id]["alert"]

        if usage > threshold and not alert:
            DISK_STATE[server_id]["alert"] = True
            return True

        if usage < threshold and alert:
            DISK_STATE[server_id]["alert"] = False
            return True

        return False

    except Exception as e:
        logger.error(f"[{server_id}] disk__analyzer failed -> {e}")
        return False


# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def disk__send_message(data_by_server):
    logger = LOGGERS["global"]
    try:
        if not data_by_server:
            logger.error("disk__send_message: empty data")
            return

        parts = []
        prepared = []

        for sid, data in data_by_server.items():
            srv   = SERVERS[sid]
            name  = escape_markdown(srv["name"])
            total = srv["disk"]["total_gb"]
            usage = float(data["disk_percent"])
            used  = (total * usage) / 100
            alert = DISK_STATE[sid]["alert"]

            state = "‚ö†Ô∏è *–ü–†–ï–í–´–®–ï–ù–ò–ï*" if alert else "‚úÖ *–ù–û–†–ú–ê*"
            usage_val = escape_markdown(f"{usage:.1f}%")
            used_val  = escape_markdown(f"{used:.1f}/{total} –ì–ë")

            prepared.append((name, state, used_val, usage_val))

        if len(prepared) == 1:
            name, state, used_val, usage_val = prepared[0]
            msg = (
                f"*{name}*\n"
                f"{state}\n\n"
                f"üíΩ –î–∏—Å–∫: `{used_val}` ‚Äî `{usage_val}`"
            )
        else:
            for (name, state, used_val, usage_val) in prepared:
                parts.append(
                    f"*{name}*\n"
                    f"{state}\n"
                    f"üíΩ –î–∏—Å–∫: `{used_val}` ‚Äî `{usage_val}`"
                )
            msg = "\n\n".join(parts)

        await bot.send_message(chat_id=TG_ID, text=msg, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"disk__send_message failed -> {e}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ DISK (—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏)
async def disk__auto_monitoring(server_id):
    logger = LOGGERS[server_id]
    interval = SERVERS[server_id]["disk"]["interval"]

    while True:
        try:
            # 1. –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = await disk__fetch_data(server_id)

            # 2. –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            notify = await disk__analyzer(server_id, data)

            # 3. –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if notify and data is not None:
                await disk__send_message({server_id: data})

        except Exception as e:
            logger.error(f"[{server_id}] disk__auto_monitoring failed -> {e}")

        # 4. –∂–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞
        await asyncio.sleep(interval)


# –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å DISK –ø–æ –∫–Ω–æ–ø–∫–µ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
async def disk__manual_button(server_id):
    logger = LOGGERS["global"] if server_id == "ALL" else LOGGERS[server_id]
    try:
        # ===== –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ =====
        if server_id == "ALL":
            data_map = {}
            for sid in SERVERS.keys():
                data = await disk__fetch_data(sid)
                if data is not None:
                    data_map[sid] = data
                else:
                    logger.warning(f"[{sid}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∏—Å–∫–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            if data_map:
                await disk__send_message(data_map)
            else:
                logger.warning("‚ùå –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å DISK: –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
            return

        # ===== –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä =====
        data = await disk__fetch_data(server_id)
        if data is not None:
            await disk__send_message({server_id: data})
        else:
            logger.warning(f"[{server_id}] ‚ùå –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å DISK: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    except Exception as e:
        logger.error(f"[{server_id}] disk__manual_button failed -> {e}")

# ===== –ü—Ä–æ—Ü–µ—Å—Å—ã =====
async def send_process_status(server, missing=None):
    name = server["name"]
    if missing:
        msg = (
            f"üß© *{escape_markdown(name)}*\n"
            f"‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã:\n"
            + "\n".join(f"‚Ä¢ `{escape_markdown(proc)}`" for proc in missing)
        )
    else:
        msg = (
            f"üß© *{escape_markdown(name)}*\n"
            f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
        )

    try:
        await bot.send_message(chat_id=TG_ID, text=msg, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")

async def fetch_process_data(server):
    if "processes" not in server or not server["processes"].get("required"):
        return []

    if server["type"] == "local":
        try:
            proc = await asyncio.create_subprocess_shell(
                "systemctl list-units --type=service --state=running --no-pager --no-legend",
                stdout=asyncio.subprocess.PIPE
            )
            stdout, _ = await proc.communicate()
            lines = stdout.decode().strip().split("\n")
            services = [line.split()[0].replace(".service", "") for line in lines if line]
            return services
        except Exception as e:
            print(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return []

    elif server["type"] == "remote":
        try:
            url = f'{server["base_url"]}{server["processes"]["url"]}?token={server["token"]}'
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return data.get("running", [])
        except Exception as e:
            print(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return []

    return []

async def monitor_processes(server, logger):
    if "processes" not in server or not server["processes"].get("required"):
        return

    interval = server["processes"]["interval"]

    while True:
        try:
            running = await fetch_process_data(server)
            required = server["processes"]["required"]
            missing = [proc for proc in required if proc not in running]

            if missing:
                logger.warning(f"[{server['name']}] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã: {', '.join(missing)}")
                await send_process_status(server, missing)
            else:
                logger.info(f"[{server['name']}] ‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ")

        except Exception as e:
            logger.error(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

        await asyncio.sleep(interval)

# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# ===== –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤ =====
async def _get_running_procs_local() -> list[str]:
    names = set()
    try:
        for p in psutil.process_iter(["name", "cmdline"]):
            info = p.info
            if info.get("name"):
                names.add(info["name"].lower())
            if info.get("cmdline"):
                for part in info["cmdline"]:
                    if not part:
                        continue
                    base = os.path.basename(str(part))
                    if base:
                        names.add(base.lower())
    except Exception:
        pass
    return sorted(names)

async def _get_running_procs_remote(server) -> list[str]:
    url = f'{server["base_url"]}{server["processes"]["url"]}?token={server["token"]}'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                if resp.status != 200:
                    return []
                data = await resp.json()
                # –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏
                for key in ("processes", "running", "ps"):
                    if isinstance(data.get(key), list):
                        return [str(x).lower() for x in data[key]]
    except Exception:
        pass
    return []

def _detect_miners(running: list[str], suspects: list[str]) -> list[str]:
    rset = set(running)
    found = set()
    for proc in rset:
        for sig in suspects:
            s = sig.lower()
            if s == proc or s in proc:
                found.add(proc)
    return sorted(found)

async def send_miner_alert(server, found: list[str]):
    name = escape_markdown(server["name"])
    lines = "\n".join(f"‚Ä¢ `{escape_markdown(p)}`" for p in found)
    msg = (
        f"‚õèÔ∏èüö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞–π–Ω–µ—Ä-–ø—Ä–æ—Ü–µ—Å—Å—ã* –Ω–∞ *{name}*:\n"
        f"{lines}"
    )
    try:
        await bot.send_message(chat_id=TG_ID, text=msg, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ miner-alert: {e}")

async def monitor_miners(server, logger):
    try:
        interval = int(MINER_SCAN.get("interval", 3600))
        suspects = [s.lower() for s in MINER_SCAN.get("processes", [])]
    except Exception:
        logger.error(f"[{server['name']}] ‚ùå MINER_SCAN config invalid, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω.")
        return

    if not suspects or interval <= 0:
        logger.info(f"[{server['name']}] ‚õèÔ∏è MINER_SCAN –æ—Ç–∫–ª—é—á—ë–Ω (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π interval).")
        return

    while True:
        try:
            if server["type"] == "local":
                running = await _get_running_procs_local()
            else:
                if "processes" not in server or "url" not in server["processes"]:
                    logger.warning(f"[{server['name']}] ‚õèÔ∏è –ù–µ—Ç remote /processes API ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
                    await asyncio.sleep(interval)
                    continue
                running = await _get_running_procs_remote(server)

            found = _detect_miners(running, suspects)
            if found:
                logger.warning(f"[{server['name']}] ‚õèÔ∏èüö® –ù–∞–π–¥–µ–Ω—ã –º–∞–π–Ω–µ—Ä—ã: {', '.join(found)}")
                await send_miner_alert(server, found)
            else:
                logger.info(f"[{server['name']}] ‚õèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤: –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤: {e}")

        await asyncio.sleep(interval)

# ===== –û–±–Ω–æ–≤–ª–µ–Ω–∏—è =====
async def send_update_status(server, updates=None):
    name = server["name"]
    if updates:
        msg = (
            f"üì¶ *{escape_markdown(name)}*\n"
            f"üîÑ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\\!\n"
        )
    else:
        msg = (
            f"üì¶ *{escape_markdown(name)}*\n"
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç"
        )

    try:
        await bot.send_message(chat_id=TG_ID, text=msg, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {e}")

async def fetch_updates(server):
    if server["type"] == "local":
        try:
            proc = await asyncio.create_subprocess_shell(
                "apt list --upgradable 2>/dev/null | tail -n +2",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, _ = await proc.communicate()
            return bool(stdout.decode().strip())
        except Exception as e:
            print(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None

    elif server["type"] == "remote":
        try:
            url = f'{server["base_url"]}{server["updates"]["url"]}?token={server["token"]}'
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=15) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        return bool(data.get("updates"))
        except Exception as e:
            print(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return None

    return None

async def monitor_updates(server, logger):
    if "updates" not in server:
        return

    update_time_str = server["updates"]["time"]
    hour, minute = map(int, update_time_str.split(":"))

    while True:
        now = datetime.datetime.now()
        target_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)

        if now >= target_time:
            target_time += datetime.timedelta(days=1)

        sleep_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(sleep_seconds)

        try:
            updates_available = await fetch_updates(server)
            if updates_available is None:
                logger.warning(f"[{server['name']}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.")
            elif updates_available:
                logger.warning(f"[{server['name']}] üì¶ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                await send_update_status(server, updates_available)
            else:
                logger.info(f"[{server['name']}] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç.")
        except Exception as e:
            logger.error(f"[{server['name']}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ =====
async def monitor(server_id: str):
    logger = LOGGERS[server_id]
    tasks = [
        asyncio.create_task(cpu_ram__auto_monitoring(server_id)),
        asyncio.create_task(disk__auto_monitoring(server_id)),
        asyncio.create_task(monitor_processes(server_id)),
        asyncio.create_task(monitor_updates(server_id)),
        asyncio.create_task(monitor_miners(server_id)),
    ]
    await asyncio.gather(*tasks)

# üöÄ ===== –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ =====
async def main():
    print("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
    init_loggers()
    tasks = [monitor(server_id) for server_id in SERVERS.keys()]
    tasks.append(monitor_sites())
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())